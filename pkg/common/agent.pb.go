// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.19.1
// source: pkg/common/proto/agent.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bet_Type int32

const (
	Bet_OVER  Bet_Type = 0
	Bet_UNDER Bet_Type = 1
)

// Enum value maps for Bet_Type.
var (
	Bet_Type_name = map[int32]string{
		0: "OVER",
		1: "UNDER",
	}
	Bet_Type_value = map[string]int32{
		"OVER":  0,
		"UNDER": 1,
	}
)

func (x Bet_Type) Enum() *Bet_Type {
	p := new(Bet_Type)
	*p = x
	return p
}

func (x Bet_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bet_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_agent_proto_enumTypes[0].Descriptor()
}

func (Bet_Type) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_agent_proto_enumTypes[0]
}

func (x Bet_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bet_Type.Descriptor instead.
func (Bet_Type) EnumDescriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{1, 0}
}

type Bot_Source int32

const (
	Bot_LOCAL  Bot_Source = 0
	Bot_REMOTE Bot_Source = 1
)

// Enum value maps for Bot_Source.
var (
	Bot_Source_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE",
	}
	Bot_Source_value = map[string]int32{
		"LOCAL":  0,
		"REMOTE": 1,
	}
)

func (x Bot_Source) Enum() *Bot_Source {
	p := new(Bot_Source)
	*p = x
	return p
}

func (x Bot_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bot_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_common_proto_agent_proto_enumTypes[1].Descriptor()
}

func (Bot_Source) Type() protoreflect.EnumType {
	return &file_pkg_common_proto_agent_proto_enumTypes[1]
}

func (x Bot_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bot_Source.Descriptor instead.
func (Bot_Source) EnumDescriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{7, 0}
}

type FantasyLandscape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchNumber uint32          `protobuf:"varint,1,opt,name=match_number,json=matchNumber,proto3" json:"match_number,omitempty"`
	Settings    *LeagueSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	BotTeam     *FantasyTeam    `protobuf:"bytes,3,opt,name=bot_team,json=botTeam,proto3" json:"bot_team,omitempty"`
	Bet         *Bet            `protobuf:"bytes,4,opt,name=bet,proto3" json:"bet,omitempty"`
	Players     []*Player       `protobuf:"bytes,5,rep,name=players,proto3" json:"players,omitempty"` // TODO historical / statistical data
}

func (x *FantasyLandscape) Reset() {
	*x = FantasyLandscape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FantasyLandscape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FantasyLandscape) ProtoMessage() {}

func (x *FantasyLandscape) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FantasyLandscape.ProtoReflect.Descriptor instead.
func (*FantasyLandscape) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{0}
}

func (x *FantasyLandscape) GetMatchNumber() uint32 {
	if x != nil {
		return x.MatchNumber
	}
	return 0
}

func (x *FantasyLandscape) GetSettings() *LeagueSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *FantasyLandscape) GetBotTeam() *FantasyTeam {
	if x != nil {
		return x.BotTeam
	}
	return nil
}

func (x *FantasyLandscape) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *FantasyLandscape) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfessionalHomeTeam string                 `protobuf:"bytes,1,opt,name=professional_home_team,json=professionalHomeTeam,proto3" json:"professional_home_team,omitempty"`
	ProfessionalAwayTeam string                 `protobuf:"bytes,2,opt,name=professional_away_team,json=professionalAwayTeam,proto3" json:"professional_away_team,omitempty"`
	Player               *Player                `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Type                 Bet_Type               `protobuf:"varint,4,opt,name=type,proto3,enum=Bet_Type" json:"type,omitempty"`
	Points               float32                `protobuf:"fixed32,5,opt,name=points,proto3" json:"points,omitempty"`
	Price                float32                `protobuf:"fixed32,6,opt,name=price,proto3" json:"price,omitempty"`
	StartTime            *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{1}
}

func (x *Bet) GetProfessionalHomeTeam() string {
	if x != nil {
		return x.ProfessionalHomeTeam
	}
	return ""
}

func (x *Bet) GetProfessionalAwayTeam() string {
	if x != nil {
		return x.ProfessionalAwayTeam
	}
	return ""
}

func (x *Bet) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *Bet) GetType() Bet_Type {
	if x != nil {
		return x.Type
	}
	return Bet_OVER
}

func (x *Bet) GetPoints() float32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Bet) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Bet) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type FantasySelections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakeBet bool          `protobuf:"varint,1,opt,name=make_bet,json=makeBet,proto3" json:"make_bet,omitempty"`
	Slots   []*PlayerSlot `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
}

func (x *FantasySelections) Reset() {
	*x = FantasySelections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FantasySelections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FantasySelections) ProtoMessage() {}

func (x *FantasySelections) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FantasySelections.ProtoReflect.Descriptor instead.
func (*FantasySelections) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{2}
}

func (x *FantasySelections) GetMakeBet() bool {
	if x != nil {
		return x.MakeBet
	}
	return false
}

func (x *FantasySelections) GetSlots() []*PlayerSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type FantasyTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *FantasyTeam) Reset() {
	*x = FantasyTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FantasyTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FantasyTeam) ProtoMessage() {}

func (x *FantasyTeam) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FantasyTeam.ProtoReflect.Descriptor instead.
func (*FantasyTeam) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{3}
}

func (x *FantasyTeam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FantasyTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FantasyTeam) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type LeagueSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTeams     uint32        `protobuf:"varint,1,opt,name=num_teams,json=numTeams,proto3" json:"num_teams,omitempty"`
	SlotsPerTeam []*PlayerSlot `protobuf:"bytes,2,rep,name=slots_per_team,json=slotsPerTeam,proto3" json:"slots_per_team,omitempty"` // scoring, budgets, etc.
}

func (x *LeagueSettings) Reset() {
	*x = LeagueSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeagueSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeagueSettings) ProtoMessage() {}

func (x *LeagueSettings) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeagueSettings.ProtoReflect.Descriptor instead.
func (*LeagueSettings) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{4}
}

func (x *LeagueSettings) GetNumTeams() uint32 {
	if x != nil {
		return x.NumTeams
	}
	return 0
}

func (x *LeagueSettings) GetSlotsPerTeam() []*PlayerSlot {
	if x != nil {
		return x.SlotsPerTeam
	}
	return nil
}

type PlayerSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AllowedPlayerPositions []string `protobuf:"bytes,2,rep,name=allowed_player_positions,json=allowedPlayerPositions,proto3" json:"allowed_player_positions,omitempty"`
	AssignedPlayerId       string   `protobuf:"bytes,3,opt,name=assigned_player_id,json=assignedPlayerId,proto3" json:"assigned_player_id,omitempty"`
}

func (x *PlayerSlot) Reset() {
	*x = PlayerSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSlot) ProtoMessage() {}

func (x *PlayerSlot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSlot.ProtoReflect.Descriptor instead.
func (*PlayerSlot) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerSlot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerSlot) GetAllowedPlayerPositions() []string {
	if x != nil {
		return x.AllowedPlayerPositions
	}
	return nil
}

func (x *PlayerSlot) GetAssignedPlayerId() string {
	if x != nil {
		return x.AssignedPlayerId
	}
	return ""
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullName         string   `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	AllowedPositions []string `protobuf:"bytes,3,rep,name=allowed_positions,json=allowedPositions,proto3" json:"allowed_positions,omitempty"`
	ProfessionalTeam string   `protobuf:"bytes,4,opt,name=professional_team,json=professionalTeam,proto3" json:"professional_team,omitempty"`
	Status           string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	FantasyTeamId    uint32   `protobuf:"varint,6,opt,name=fantasy_team_id,json=fantasyTeamId,proto3" json:"fantasy_team_id,omitempty"` // 0 should be unassigned
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{6}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Player) GetAllowedPositions() []string {
	if x != nil {
		return x.AllowedPositions
	}
	return nil
}

func (x *Player) GetProfessionalTeam() string {
	if x != nil {
		return x.ProfessionalTeam
	}
	return ""
}

func (x *Player) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Player) GetFantasyTeamId() uint32 {
	if x != nil {
		return x.FantasyTeamId
	}
	return 0
}

type Bot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceType         Bot_Source `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=Bot_Source" json:"source_type,omitempty"`
	SourceRepoUsername string     `protobuf:"bytes,3,opt,name=source_repo_username,json=sourceRepoUsername,proto3" json:"source_repo_username,omitempty"`
	SourceRepoName     string     `protobuf:"bytes,4,opt,name=source_repo_name,json=sourceRepoName,proto3" json:"source_repo_name,omitempty"`
	SourcePath         string     `protobuf:"bytes,5,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	FantasyTeamId      uint32     `protobuf:"varint,6,opt,name=fantasy_team_id,json=fantasyTeamId,proto3" json:"fantasy_team_id,omitempty"` // 0 should be unassigned
}

func (x *Bot) Reset() {
	*x = Bot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{7}
}

func (x *Bot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bot) GetSourceType() Bot_Source {
	if x != nil {
		return x.SourceType
	}
	return Bot_LOCAL
}

func (x *Bot) GetSourceRepoUsername() string {
	if x != nil {
		return x.SourceRepoUsername
	}
	return ""
}

func (x *Bot) GetSourceRepoName() string {
	if x != nil {
		return x.SourceRepoName
	}
	return ""
}

func (x *Bot) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *Bot) GetFantasyTeamId() uint32 {
	if x != nil {
		return x.FantasyTeamId
	}
	return 0
}

type Simulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Landscape     *FantasyLandscape `protobuf:"bytes,2,opt,name=landscape,proto3" json:"landscape,omitempty"`
	NumIterations uint32            `protobuf:"varint,3,opt,name=num_iterations,json=numIterations,proto3" json:"num_iterations,omitempty"`
}

func (x *Simulation) Reset() {
	*x = Simulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Simulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simulation) ProtoMessage() {}

func (x *Simulation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Simulation.ProtoReflect.Descriptor instead.
func (*Simulation) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{8}
}

func (x *Simulation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Simulation) GetLandscape() *FantasyLandscape {
	if x != nil {
		return x.Landscape
	}
	return nil
}

func (x *Simulation) GetNumIterations() uint32 {
	if x != nil {
		return x.NumIterations
	}
	return 0
}

type GameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonYear         string                 `protobuf:"bytes,1,opt,name=season_year,json=seasonYear,proto3" json:"season_year,omitempty"`
	PlayerId           int32                  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	PlayerName         string                 `protobuf:"bytes,3,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Nickname           string                 `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	TeamId             int32                  `protobuf:"varint,5,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamAbbreviation   string                 `protobuf:"bytes,6,opt,name=team_abbreviation,json=teamAbbreviation,proto3" json:"team_abbreviation,omitempty"`
	TeamName           string                 `protobuf:"bytes,7,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	GameId             string                 `protobuf:"bytes,8,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameDate           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=game_date,json=gameDate,proto3" json:"game_date,omitempty"`
	Matchup            string                 `protobuf:"bytes,10,opt,name=matchup,proto3" json:"matchup,omitempty"`
	Wl                 string                 `protobuf:"bytes,11,opt,name=wl,proto3" json:"wl,omitempty"`
	Min                float32                `protobuf:"fixed32,12,opt,name=min,proto3" json:"min,omitempty"`
	Fgm                int32                  `protobuf:"varint,13,opt,name=fgm,proto3" json:"fgm,omitempty"`
	Fga                int32                  `protobuf:"varint,14,opt,name=fga,proto3" json:"fga,omitempty"`
	FgPct              float32                `protobuf:"fixed32,15,opt,name=fg_pct,json=fgPct,proto3" json:"fg_pct,omitempty"`
	Fg3M               int32                  `protobuf:"varint,16,opt,name=fg3m,proto3" json:"fg3m,omitempty"`
	Fg3A               int32                  `protobuf:"varint,17,opt,name=fg3a,proto3" json:"fg3a,omitempty"`
	Fg3Pct             float32                `protobuf:"fixed32,18,opt,name=fg3_pct,json=fg3Pct,proto3" json:"fg3_pct,omitempty"`
	Ftm                int32                  `protobuf:"varint,19,opt,name=ftm,proto3" json:"ftm,omitempty"`
	Fta                int32                  `protobuf:"varint,20,opt,name=fta,proto3" json:"fta,omitempty"`
	FtPct              float32                `protobuf:"fixed32,21,opt,name=ft_pct,json=ftPct,proto3" json:"ft_pct,omitempty"`
	Oreb               int32                  `protobuf:"varint,22,opt,name=oreb,proto3" json:"oreb,omitempty"`
	Dreb               int32                  `protobuf:"varint,23,opt,name=dreb,proto3" json:"dreb,omitempty"`
	Reb                int32                  `protobuf:"varint,24,opt,name=reb,proto3" json:"reb,omitempty"`
	Ast                int32                  `protobuf:"varint,25,opt,name=ast,proto3" json:"ast,omitempty"`
	Tov                int32                  `protobuf:"varint,26,opt,name=tov,proto3" json:"tov,omitempty"`
	Stl                int32                  `protobuf:"varint,27,opt,name=stl,proto3" json:"stl,omitempty"`
	Blk                int32                  `protobuf:"varint,28,opt,name=blk,proto3" json:"blk,omitempty"`
	Blka               int32                  `protobuf:"varint,29,opt,name=blka,proto3" json:"blka,omitempty"`
	Pf                 int32                  `protobuf:"varint,30,opt,name=pf,proto3" json:"pf,omitempty"`
	Pfd                int32                  `protobuf:"varint,31,opt,name=pfd,proto3" json:"pfd,omitempty"`
	Pts                int32                  `protobuf:"varint,32,opt,name=pts,proto3" json:"pts,omitempty"`
	PlusMinus          int32                  `protobuf:"varint,33,opt,name=plus_minus,json=plusMinus,proto3" json:"plus_minus,omitempty"`
	NbaFantasyPts      float32                `protobuf:"fixed32,34,opt,name=nba_fantasy_pts,json=nbaFantasyPts,proto3" json:"nba_fantasy_pts,omitempty"`
	Dd2                int32                  `protobuf:"varint,35,opt,name=dd2,proto3" json:"dd2,omitempty"`
	Td3                int32                  `protobuf:"varint,36,opt,name=td3,proto3" json:"td3,omitempty"`
	WnbaFantasyPts     float32                `protobuf:"fixed32,37,opt,name=wnba_fantasy_pts,json=wnbaFantasyPts,proto3" json:"wnba_fantasy_pts,omitempty"`
	GpRank             int32                  `protobuf:"varint,38,opt,name=gp_rank,json=gpRank,proto3" json:"gp_rank,omitempty"`
	WRank              int32                  `protobuf:"varint,39,opt,name=w_rank,json=wRank,proto3" json:"w_rank,omitempty"`
	LRank              int32                  `protobuf:"varint,40,opt,name=l_rank,json=lRank,proto3" json:"l_rank,omitempty"`
	WPctRank           int32                  `protobuf:"varint,41,opt,name=w_pct_rank,json=wPctRank,proto3" json:"w_pct_rank,omitempty"`
	MinRank            int32                  `protobuf:"varint,42,opt,name=min_rank,json=minRank,proto3" json:"min_rank,omitempty"`
	FgmRank            int32                  `protobuf:"varint,43,opt,name=fgm_rank,json=fgmRank,proto3" json:"fgm_rank,omitempty"`
	FgaRank            int32                  `protobuf:"varint,44,opt,name=fga_rank,json=fgaRank,proto3" json:"fga_rank,omitempty"`
	FgPctRank          int32                  `protobuf:"varint,45,opt,name=fg_pct_rank,json=fgPctRank,proto3" json:"fg_pct_rank,omitempty"`
	Fg3MRank           int32                  `protobuf:"varint,46,opt,name=fg3m_rank,json=fg3mRank,proto3" json:"fg3m_rank,omitempty"`
	Fg3ARank           int32                  `protobuf:"varint,47,opt,name=fg3a_rank,json=fg3aRank,proto3" json:"fg3a_rank,omitempty"`
	Fg3PctRank         int32                  `protobuf:"varint,48,opt,name=fg3_pct_rank,json=fg3PctRank,proto3" json:"fg3_pct_rank,omitempty"`
	FtmRank            int32                  `protobuf:"varint,49,opt,name=ftm_rank,json=ftmRank,proto3" json:"ftm_rank,omitempty"`
	FtaRank            int32                  `protobuf:"varint,50,opt,name=fta_rank,json=ftaRank,proto3" json:"fta_rank,omitempty"`
	FtPctRank          int32                  `protobuf:"varint,51,opt,name=ft_pct_rank,json=ftPctRank,proto3" json:"ft_pct_rank,omitempty"`
	OrebRank           int32                  `protobuf:"varint,52,opt,name=oreb_rank,json=orebRank,proto3" json:"oreb_rank,omitempty"`
	DrebRank           int32                  `protobuf:"varint,53,opt,name=dreb_rank,json=drebRank,proto3" json:"dreb_rank,omitempty"`
	RebRank            int32                  `protobuf:"varint,54,opt,name=reb_rank,json=rebRank,proto3" json:"reb_rank,omitempty"`
	AstRank            int32                  `protobuf:"varint,55,opt,name=ast_rank,json=astRank,proto3" json:"ast_rank,omitempty"`
	TovRank            int32                  `protobuf:"varint,56,opt,name=tov_rank,json=tovRank,proto3" json:"tov_rank,omitempty"`
	StlRank            int32                  `protobuf:"varint,57,opt,name=stl_rank,json=stlRank,proto3" json:"stl_rank,omitempty"`
	BlkRank            int32                  `protobuf:"varint,58,opt,name=blk_rank,json=blkRank,proto3" json:"blk_rank,omitempty"`
	BlkaRank           int32                  `protobuf:"varint,59,opt,name=blka_rank,json=blkaRank,proto3" json:"blka_rank,omitempty"`
	PfRank             int32                  `protobuf:"varint,60,opt,name=pf_rank,json=pfRank,proto3" json:"pf_rank,omitempty"`
	PfdRank            int32                  `protobuf:"varint,61,opt,name=pfd_rank,json=pfdRank,proto3" json:"pfd_rank,omitempty"`
	PtsRank            int32                  `protobuf:"varint,62,opt,name=pts_rank,json=ptsRank,proto3" json:"pts_rank,omitempty"`
	PlusMinusRank      int32                  `protobuf:"varint,63,opt,name=plus_minus_rank,json=plusMinusRank,proto3" json:"plus_minus_rank,omitempty"`
	NbaFantasyPtsRank  int32                  `protobuf:"varint,64,opt,name=nba_fantasy_pts_rank,json=nbaFantasyPtsRank,proto3" json:"nba_fantasy_pts_rank,omitempty"`
	Dd2Rank            int32                  `protobuf:"varint,65,opt,name=dd2_rank,json=dd2Rank,proto3" json:"dd2_rank,omitempty"`
	Td3Rank            int32                  `protobuf:"varint,66,opt,name=td3_rank,json=td3Rank,proto3" json:"td3_rank,omitempty"`
	WnbaFantasyPtsRank int32                  `protobuf:"varint,67,opt,name=wnba_fantasy_pts_rank,json=wnbaFantasyPtsRank,proto3" json:"wnba_fantasy_pts_rank,omitempty"`
	AvailableFlag      int32                  `protobuf:"varint,68,opt,name=available_flag,json=availableFlag,proto3" json:"available_flag,omitempty"`
}

func (x *GameLog) Reset() {
	*x = GameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_common_proto_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameLog) ProtoMessage() {}

func (x *GameLog) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_common_proto_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameLog.ProtoReflect.Descriptor instead.
func (*GameLog) Descriptor() ([]byte, []int) {
	return file_pkg_common_proto_agent_proto_rawDescGZIP(), []int{9}
}

func (x *GameLog) GetSeasonYear() string {
	if x != nil {
		return x.SeasonYear
	}
	return ""
}

func (x *GameLog) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *GameLog) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *GameLog) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GameLog) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *GameLog) GetTeamAbbreviation() string {
	if x != nil {
		return x.TeamAbbreviation
	}
	return ""
}

func (x *GameLog) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *GameLog) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameLog) GetGameDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GameDate
	}
	return nil
}

func (x *GameLog) GetMatchup() string {
	if x != nil {
		return x.Matchup
	}
	return ""
}

func (x *GameLog) GetWl() string {
	if x != nil {
		return x.Wl
	}
	return ""
}

func (x *GameLog) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *GameLog) GetFgm() int32 {
	if x != nil {
		return x.Fgm
	}
	return 0
}

func (x *GameLog) GetFga() int32 {
	if x != nil {
		return x.Fga
	}
	return 0
}

func (x *GameLog) GetFgPct() float32 {
	if x != nil {
		return x.FgPct
	}
	return 0
}

func (x *GameLog) GetFg3M() int32 {
	if x != nil {
		return x.Fg3M
	}
	return 0
}

func (x *GameLog) GetFg3A() int32 {
	if x != nil {
		return x.Fg3A
	}
	return 0
}

func (x *GameLog) GetFg3Pct() float32 {
	if x != nil {
		return x.Fg3Pct
	}
	return 0
}

func (x *GameLog) GetFtm() int32 {
	if x != nil {
		return x.Ftm
	}
	return 0
}

func (x *GameLog) GetFta() int32 {
	if x != nil {
		return x.Fta
	}
	return 0
}

func (x *GameLog) GetFtPct() float32 {
	if x != nil {
		return x.FtPct
	}
	return 0
}

func (x *GameLog) GetOreb() int32 {
	if x != nil {
		return x.Oreb
	}
	return 0
}

func (x *GameLog) GetDreb() int32 {
	if x != nil {
		return x.Dreb
	}
	return 0
}

func (x *GameLog) GetReb() int32 {
	if x != nil {
		return x.Reb
	}
	return 0
}

func (x *GameLog) GetAst() int32 {
	if x != nil {
		return x.Ast
	}
	return 0
}

func (x *GameLog) GetTov() int32 {
	if x != nil {
		return x.Tov
	}
	return 0
}

func (x *GameLog) GetStl() int32 {
	if x != nil {
		return x.Stl
	}
	return 0
}

func (x *GameLog) GetBlk() int32 {
	if x != nil {
		return x.Blk
	}
	return 0
}

func (x *GameLog) GetBlka() int32 {
	if x != nil {
		return x.Blka
	}
	return 0
}

func (x *GameLog) GetPf() int32 {
	if x != nil {
		return x.Pf
	}
	return 0
}

func (x *GameLog) GetPfd() int32 {
	if x != nil {
		return x.Pfd
	}
	return 0
}

func (x *GameLog) GetPts() int32 {
	if x != nil {
		return x.Pts
	}
	return 0
}

func (x *GameLog) GetPlusMinus() int32 {
	if x != nil {
		return x.PlusMinus
	}
	return 0
}

func (x *GameLog) GetNbaFantasyPts() float32 {
	if x != nil {
		return x.NbaFantasyPts
	}
	return 0
}

func (x *GameLog) GetDd2() int32 {
	if x != nil {
		return x.Dd2
	}
	return 0
}

func (x *GameLog) GetTd3() int32 {
	if x != nil {
		return x.Td3
	}
	return 0
}

func (x *GameLog) GetWnbaFantasyPts() float32 {
	if x != nil {
		return x.WnbaFantasyPts
	}
	return 0
}

func (x *GameLog) GetGpRank() int32 {
	if x != nil {
		return x.GpRank
	}
	return 0
}

func (x *GameLog) GetWRank() int32 {
	if x != nil {
		return x.WRank
	}
	return 0
}

func (x *GameLog) GetLRank() int32 {
	if x != nil {
		return x.LRank
	}
	return 0
}

func (x *GameLog) GetWPctRank() int32 {
	if x != nil {
		return x.WPctRank
	}
	return 0
}

func (x *GameLog) GetMinRank() int32 {
	if x != nil {
		return x.MinRank
	}
	return 0
}

func (x *GameLog) GetFgmRank() int32 {
	if x != nil {
		return x.FgmRank
	}
	return 0
}

func (x *GameLog) GetFgaRank() int32 {
	if x != nil {
		return x.FgaRank
	}
	return 0
}

func (x *GameLog) GetFgPctRank() int32 {
	if x != nil {
		return x.FgPctRank
	}
	return 0
}

func (x *GameLog) GetFg3MRank() int32 {
	if x != nil {
		return x.Fg3MRank
	}
	return 0
}

func (x *GameLog) GetFg3ARank() int32 {
	if x != nil {
		return x.Fg3ARank
	}
	return 0
}

func (x *GameLog) GetFg3PctRank() int32 {
	if x != nil {
		return x.Fg3PctRank
	}
	return 0
}

func (x *GameLog) GetFtmRank() int32 {
	if x != nil {
		return x.FtmRank
	}
	return 0
}

func (x *GameLog) GetFtaRank() int32 {
	if x != nil {
		return x.FtaRank
	}
	return 0
}

func (x *GameLog) GetFtPctRank() int32 {
	if x != nil {
		return x.FtPctRank
	}
	return 0
}

func (x *GameLog) GetOrebRank() int32 {
	if x != nil {
		return x.OrebRank
	}
	return 0
}

func (x *GameLog) GetDrebRank() int32 {
	if x != nil {
		return x.DrebRank
	}
	return 0
}

func (x *GameLog) GetRebRank() int32 {
	if x != nil {
		return x.RebRank
	}
	return 0
}

func (x *GameLog) GetAstRank() int32 {
	if x != nil {
		return x.AstRank
	}
	return 0
}

func (x *GameLog) GetTovRank() int32 {
	if x != nil {
		return x.TovRank
	}
	return 0
}

func (x *GameLog) GetStlRank() int32 {
	if x != nil {
		return x.StlRank
	}
	return 0
}

func (x *GameLog) GetBlkRank() int32 {
	if x != nil {
		return x.BlkRank
	}
	return 0
}

func (x *GameLog) GetBlkaRank() int32 {
	if x != nil {
		return x.BlkaRank
	}
	return 0
}

func (x *GameLog) GetPfRank() int32 {
	if x != nil {
		return x.PfRank
	}
	return 0
}

func (x *GameLog) GetPfdRank() int32 {
	if x != nil {
		return x.PfdRank
	}
	return 0
}

func (x *GameLog) GetPtsRank() int32 {
	if x != nil {
		return x.PtsRank
	}
	return 0
}

func (x *GameLog) GetPlusMinusRank() int32 {
	if x != nil {
		return x.PlusMinusRank
	}
	return 0
}

func (x *GameLog) GetNbaFantasyPtsRank() int32 {
	if x != nil {
		return x.NbaFantasyPtsRank
	}
	return 0
}

func (x *GameLog) GetDd2Rank() int32 {
	if x != nil {
		return x.Dd2Rank
	}
	return 0
}

func (x *GameLog) GetTd3Rank() int32 {
	if x != nil {
		return x.Td3Rank
	}
	return 0
}

func (x *GameLog) GetWnbaFantasyPtsRank() int32 {
	if x != nil {
		return x.WnbaFantasyPtsRank
	}
	return 0
}

func (x *GameLog) GetAvailableFlag() int32 {
	if x != nil {
		return x.AvailableFlag
	}
	return 0
}

var File_pkg_common_proto_agent_proto protoreflect.FileDescriptor

var file_pkg_common_proto_agent_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc6, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x03, 0x62, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x65, 0x74,
	0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x03, 0x42, 0x65, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x42, 0x65,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x44, 0x45, 0x52,
	0x10, 0x01, 0x22, 0x51, 0x0a, 0x11, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6b, 0x65, 0x42,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x60,
	0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d,
	0x22, 0x88, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x89, 0x02,
	0x0a, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x42, 0x6f, 0x74,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x74, 0x61,
	0x73, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x22, 0x74, 0x0a, 0x0a, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x64, 0x73,
	0x63, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa9, 0x0e, 0x0a, 0x07, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x61, 0x6d,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x77, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x77, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x67, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x67, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x67, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x66, 0x67, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x66,
	0x67, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x67, 0x50,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x33, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x66, 0x67, 0x33, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x67, 0x33, 0x61, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x67, 0x33, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x67,
	0x33, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x67, 0x33,
	0x50, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x74, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x66, 0x74, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x66, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x74, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x74, 0x50, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x72, 0x65, 0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6f, 0x72,
	0x65, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x65, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x72, 0x65, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x62, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x76, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x6f, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x74, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x74, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x6c, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x6c, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6b, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x62, 0x6c, 0x6b, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x66, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x70, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c,
	0x75, 0x73, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x62, 0x61, 0x5f, 0x66,
	0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6e, 0x62, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x64, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x64,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x64, 0x33, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x64, 0x33, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6e, 0x62, 0x61, 0x5f, 0x66, 0x61, 0x6e, 0x74,
	0x61, 0x73, 0x79, 0x5f, 0x70, 0x74, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x77,
	0x6e, 0x62, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x67, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x15, 0x0a,
	0x06, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x0a, 0x77, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x50, 0x63, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x67, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x67, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x67, 0x61, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x67, 0x61, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x67, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x67, 0x50, 0x63, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x67, 0x33, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x67, 0x33, 0x6d, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x67, 0x33, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x67, 0x33, 0x61, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x67, 0x33, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x67, 0x33, 0x50, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x74, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x74, 0x6d, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x74,
	0x61, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x74, 0x50, 0x63,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x65, 0x62, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72, 0x65, 0x62, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x65, 0x62, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x72, 0x65, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x62, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x62, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x76, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x76, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x6c, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62,
	0x6c, 0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6b, 0x61, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x6c, 0x6b, 0x61, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x66, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x66, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x74, 0x73, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x74, 0x73, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x75,
	0x73, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x62,
	0x61, 0x5f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x5f, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x62, 0x61, 0x46, 0x61, 0x6e,
	0x74, 0x61, 0x73, 0x79, 0x50, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x64, 0x32, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64,
	0x64, 0x32, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x64, 0x33, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x64, 0x33, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x6e, 0x62, 0x61, 0x5f, 0x66, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x5f, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x77, 0x6e, 0x62, 0x61, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x50, 0x74, 0x73,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x32, 0x50, 0x0a, 0x0c, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x15, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73, 0x79, 0x4c, 0x61,
	0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x1a, 0x12, 0x2e, 0x46, 0x61, 0x6e, 0x74, 0x61, 0x73,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x42, 0x0a, 0x5a,
	0x08, 0x2e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_common_proto_agent_proto_rawDescOnce sync.Once
	file_pkg_common_proto_agent_proto_rawDescData = file_pkg_common_proto_agent_proto_rawDesc
)

func file_pkg_common_proto_agent_proto_rawDescGZIP() []byte {
	file_pkg_common_proto_agent_proto_rawDescOnce.Do(func() {
		file_pkg_common_proto_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_common_proto_agent_proto_rawDescData)
	})
	return file_pkg_common_proto_agent_proto_rawDescData
}

var file_pkg_common_proto_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_common_proto_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pkg_common_proto_agent_proto_goTypes = []interface{}{
	(Bet_Type)(0),                 // 0: Bet.Type
	(Bot_Source)(0),               // 1: Bot.Source
	(*FantasyLandscape)(nil),      // 2: FantasyLandscape
	(*Bet)(nil),                   // 3: Bet
	(*FantasySelections)(nil),     // 4: FantasySelections
	(*FantasyTeam)(nil),           // 5: FantasyTeam
	(*LeagueSettings)(nil),        // 6: LeagueSettings
	(*PlayerSlot)(nil),            // 7: PlayerSlot
	(*Player)(nil),                // 8: Player
	(*Bot)(nil),                   // 9: Bot
	(*Simulation)(nil),            // 10: Simulation
	(*GameLog)(nil),               // 11: GameLog
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_pkg_common_proto_agent_proto_depIdxs = []int32{
	6,  // 0: FantasyLandscape.settings:type_name -> LeagueSettings
	5,  // 1: FantasyLandscape.bot_team:type_name -> FantasyTeam
	3,  // 2: FantasyLandscape.bet:type_name -> Bet
	8,  // 3: FantasyLandscape.players:type_name -> Player
	8,  // 4: Bet.player:type_name -> Player
	0,  // 5: Bet.type:type_name -> Bet.Type
	12, // 6: Bet.start_time:type_name -> google.protobuf.Timestamp
	7,  // 7: FantasySelections.slots:type_name -> PlayerSlot
	7,  // 8: LeagueSettings.slots_per_team:type_name -> PlayerSlot
	1,  // 9: Bot.source_type:type_name -> Bot.Source
	2,  // 10: Simulation.landscape:type_name -> FantasyLandscape
	12, // 11: GameLog.game_date:type_name -> google.protobuf.Timestamp
	2,  // 12: AgentService.PerformFantasyActions:input_type -> FantasyLandscape
	4,  // 13: AgentService.PerformFantasyActions:output_type -> FantasySelections
	13, // [13:14] is the sub-list for method output_type
	12, // [12:13] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_common_proto_agent_proto_init() }
func file_pkg_common_proto_agent_proto_init() {
	if File_pkg_common_proto_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_common_proto_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FantasyLandscape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FantasySelections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FantasyTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeagueSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Simulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_common_proto_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_common_proto_agent_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_common_proto_agent_proto_goTypes,
		DependencyIndexes: file_pkg_common_proto_agent_proto_depIdxs,
		EnumInfos:         file_pkg_common_proto_agent_proto_enumTypes,
		MessageInfos:      file_pkg_common_proto_agent_proto_msgTypes,
	}.Build()
	File_pkg_common_proto_agent_proto = out.File
	file_pkg_common_proto_agent_proto_rawDesc = nil
	file_pkg_common_proto_agent_proto_goTypes = nil
	file_pkg_common_proto_agent_proto_depIdxs = nil
}
